7주차 정리

실습1:
void setup() {
  Serial.begin(115200);      // 시리얼 통신 시작
  Serial.println(); 
}

void loop() {
  static unsigned long loopCnt = 0;            		// 루프 반복 횟수를 세는 변수 (static으로 선언하여 loop() 반복 중 값 유지)
  static unsigned long nextMil = millis() + 1000; 	// 현재 시각에서 1초 뒤를 목표로 설정(static으로 선언하여 loop() 반복 중 값 유지)

  loopCnt++; // 루프가 실행될 때마다 1 증가

  if (millis() >= nextMil) {      					// 현재 시간이 1초를 넘었으면
    nextMil = millis() + 1000;    				// 다음 목표 시각을 1초 뒤로 갱신
    Serial.println(loopCnt);      				// 1초 동안 반복된 loop() 횟수 출력
    loopCnt = 0;                  					// 카운터 초기화
  }
}


실습 2

#include <SimpleTimer.h>        	// SimpleTimer헤더파일 include
SimpleTimer timerCnt;          	// 타이머 객체 생성

unsigned long loopCnt;        	// 루프 횟수 카운터

void timerCntFunc() {
  Serial.println(loopCnt);     		// 1초 동안 누적된 loop() 횟수 출력
  loopCnt = 0;                 		// 카운터 초기화
}

void setup() {
  Serial.begin(115200);        		// 시리얼 통신 시작
  Serial.println();

  timerCnt.setInterval(1000, timerCntFunc); 	 // 1초(1000ms) 간격으로 timerCntFunc 실행
}

void loop() {
  timerCnt.run();              	// 타이머 체크 및 실행
  loopCnt++;                  	// loop()가 실행될 때마다 카운트
}

실습3

//변수 선언
int a1 = 2;
int a2 = 3;  	
int a3;  	

void setup() {
  Serial.begin(115200);        // 시리얼 통신 시작
  Serial.println();

  sum(a1, a2, a3);             // 함수 호출: a1 + a2 결과를 a3에 저장
  Serial.println(a3);           // 결과 출력
}

void loop() {
}

// 합 계산 함수: c는 참조(reference)로 전달되므로 호출한 변수에 직접 값이 저장됨
void sum(int a, int b, int& c) {
  c = a + b;
}




